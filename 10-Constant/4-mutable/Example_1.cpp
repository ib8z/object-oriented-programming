/*
الكلمة  mutable 


في حال كنت تنوي إنشاء كائن ثابت و لكنك تريد جعل بعض الخصائص الموجودة فيه غير ثابتة بمعنى أنه يمكن تغيير قيمتها بعد إنشاء الكائن
فيجب أن تعرف الخاصية التي تريد جعل قيمتها غير ثابتة ان تعرفها بالكلمة mutable
حتى يفهم المترجم Compiler
*/


/*
في المثال التالي قمنا بتعريف كلاس إسمه  Person
يحتوي على ثلاث خصائص إسمهم:
Name    Age     From

الخاصية Age
جعلنا نوعها mutable
حتى نستطيع تغيير قيمتها متى أردنا من الكائن الذي ننشئه من الكلاس حتى و إن قمنا بإنشائه ككائن ثابت.
كما أننا قمنا بتعريف كونستركتور يسمح لنا بتمرير قيم للخصائص 
name و age و From
وعرفنا دالة ثابتة لكي تعرض بيانات الخصائص (المتغيرات)
*/
#include <iostream>
using namespace std;


// هنا انشئنا الكلاس
class Person
{
public:
    // هنا قمنا بتعريف الخصائص التي سوف يمتلكها اي كائن ننشئه من هذا الكلاس
    // كما اننا جعلنا الخاصية Age
    // معرفة ك mutable
    string name;
    string from;
    mutable int age;


    // هنا انشئنا الكونستركتور وجعلناه يعطي قيمة للخصائص الموجودة 
    Person(string Na ,string Fr ,int Ag): name(Na) ,from(Fr) ,age(Ag)
    {
    }
        
    //  هنا عرفنا دالة ثابتة تقوم بطباعة المعلومات
    void gprint() const
    {
        cout << "Name: " << name << endl;
        cout << "Age: "  << age   << endl;
        cout << "From: " << from << endl;
    }
};




int main()
{
    // هنا قمنا بأنشاء كائن ثابت واعطيناه قيم 
    const Person P1("GK" ,"Riyadh" ,20);
    
    /**
     *  هنا افترضنا ان الشخص كبر في العمر ونريد ان نزيد من عمره ولاننا عرفنا العمر عبارة عن mutable
     * نستطيع ان نغير القيمة مع ان الكائن عرفناه ثابت
     */
    P1.age = 21;

    // هنا قمنا بأستدعاء الدالة لتعرف المعلومات ونتأكد ان قيمة العمر تغيرت
    P1.gprint();

    return 0;
}
